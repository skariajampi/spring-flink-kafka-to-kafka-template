version: '3.9'

services:
  broker:
    # Apple M1 Chip
    # platform: linux/amd64
    image: confluentinc/cp-kafka:7.5.1
    container_name: broker
    hostname: broker
    restart: always
    env_file:
      - .env
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: broker
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=broker -Dcom.sun.management.jmxremote.rmi.port=9101
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: $CLUSTER_ID
    ports:
      - 9092:9092
      - 9101:9101
    volumes:
      - broker_logdir:/var/lib/kafka/data
    networks:
      - kafka-network

  schema-registry:
    # Apple M1 Chip
    # platform: linux/amd64
    image: confluentinc/cp-schema-registry:7.5.1
    container_name: schema-registry
    hostname: schema-registry
    restart: always
    env_file:
      - .env
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: __schemas
    ports:
      - 8081:8081
    networks:
      - kafka-network
    depends_on:
      - broker
  init-kafka:
    # Apple M1 Chip
    # platform: linux/amd64
    image: confluentinc/cp-kafka:7.5.1
    entrypoint: ['/bin/sh', '-c']
    depends_on:
      - broker
    command: |
      "
      kafka-topics --bootstrap-server broker:29092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic some-record-topic --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic process-some-record-command-topic --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic update-person-command-topic --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic add-list-command-topic --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic some-record-enriched-event-topic --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic person-updated-event-topic --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic list-added-event-topic --replication-factor 1 --partitions 3
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --list
      "
    networks:
      - kafka-network
  kafka-ui:
    # Apple M1 Chip
    # platform: linux/amd64
    image: provectuslabs/kafka-ui:master
    # image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    env_file:
      - .env
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: kafka-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9101
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: kafka-connect-cluster
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      KAFKA_CLUSTERS_0_KSQLDBSERVER: http://ksqldb-server:8088
    ports:
      - 8888:8080
    volumes:
      #- /tmp/config.yml:/etc/kafkaui/dynamic_config.yaml
      - kafkaui_dir:/etc/kafkaui
    networks:
      - kafka-network
    depends_on:
      - broker
      - schema-registry

#  jobmanager:
#    image: flink:1.15.2-scala_2.12
#    ports:
#      - "9081:9081"
#    #    command: standalone-job --job-classname <main class> [--job-id <job id>] [--fromSavepoint /path/to/savepoint [--allowNonRestoredState]] [job arguments]
##    command: "jobmanager.sh start-foreground"
##    command: standalone-job --job-classname com.p.poc.PocApplication -environment docker
#    command: standalone-job --job-classname com.p.poc.PocApplication -environment docker
#    volumes:
#      - ./app/build/libs/:/opt/flink/usrlib
#      - ./conf:/opt/flink/conf
#      - flink_data:/tmp/
#    environment:
#      - |
#        FLINK_PROPERTIES=
#        jobmanager.rpc.address: jobmanager
#        parallelism.default:
#        jobmanager.web.port: 9081
#        jobmanager.memory.flink.size: 1Gb
#    networks:
#      - kafka-network
#
#  taskmanager:
#    image: flink:1.15.2-scala_2.12
#    depends_on:
#      - jobmanager
#    command: taskmanager
##    scale: 1
#    volumes:
#      - ./app/build/libs/:/opt/flink/usrlib
#      - ./conf:/opt/flink/conf
#      - flink_data:/tmp/
#    environment:
#      - |
#        FLINK_PROPERTIES=
#        jobmanager.rpc.address: jobmanager
#        taskmanager.numberOfTaskSlots: 5
#        parallelism.default: 5
#        taskmanager.memory.flink.size: 1Gb
#    networks:
#      - kafka-network

#      - kafka-connect
#      - ksqldb-server

#  jaeger:
#    image: jaegertracing/all-in-one
#    environment:
#      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
#    ports:
#      - 5775:5775/udp
#      - 6831:6831/udp
#      - 6832:6832/udp
#      - 5778:5778
#      - 16686:16686
#      - 14268:14268
#      - 9411:9411
#
#  prometheus:
#    image: prom/prometheus
#    ports:
#      - 9090:9090
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#
#  grafana:
#    image: grafana/grafana
#    ports:
#      - 3000:3000

networks:
  kafka-network:
    driver: bridge

volumes:
  broker_logdir:
  kafkaui_dir:
  flink_data:
